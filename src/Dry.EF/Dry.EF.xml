<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dry.EF</name>
    </assembly>
    <members>
        <member name="T:Dry.EF.Contexts.DryDbContext`1">
            <summary>
            ef上下文
            </summary>
            <typeparam name="TBoundedContext"></typeparam>
        </member>
        <member name="F:Dry.EF.Contexts.DryDbContext`1._entityRegisters">
            <summary>
            实体配置信息
            </summary>
        </member>
        <member name="M:Dry.EF.Contexts.DryDbContext`1.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions,System.Collections.Generic.IEnumerable{Dry.EF.EntityConfigs.IEntityRegister{`0}})">
            <summary>
            构造体
            </summary>
            <param name="options"></param>
            <param name="entityRegisters"></param>
        </member>
        <member name="M:Dry.EF.Contexts.DryDbContext`1.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            注册实体配置
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="T:Dry.EF.EntityConfigs.EntityConfig`2">
            <summary>
            实体配置
            </summary>
            <typeparam name="TBoundedContext"></typeparam>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:Dry.EF.EntityConfigs.EntityConfig`2.TableName">
            <summary>
            表名称
            </summary>
        </member>
        <member name="M:Dry.EF.EntityConfigs.EntityConfig`2.RegistTo(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            注册实体
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="M:Dry.EF.EntityConfigs.EntityConfig`2.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`1})">
            <summary>
            配置表信息
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:Dry.EF.EntityConfigs.EntityConfig`3">
            <summary>
            主键实体配置
            </summary>
            <typeparam name="TBoundedContext"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:Dry.EF.EntityConfigs.EntityConfig`3.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`1})">
            <summary>
            配置主键信息
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:Dry.EF.EntityConfigs.IEntityRegister`1">
            <summary>
            定义将实体配置类注册到上下文中
            </summary>
            <typeparam name="TBoundedContext"></typeparam>
        </member>
        <member name="M:Dry.EF.EntityConfigs.IEntityRegister`1.RegistTo(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            将当前实体映射对象注册到当前数据访问上下文实体映射配置注册器中
            </summary>
            <param name="modelBuilder">实体映射配置注册器</param>
        </member>
        <member name="T:Dry.EF.EntityConfigs.TreeEntityConfig`3">
            <summary>
            树状实体配置
            </summary>
            <typeparam name="TBoundedContext"></typeparam>
            <typeparam name="TTreeEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:Dry.EF.EntityConfigs.TreeEntityConfig`3.AncestorsExpression">
            <summary>
            实体祖先属性表达式
            </summary>
        </member>
        <member name="P:Dry.EF.EntityConfigs.TreeEntityConfig`3.DescendantsExpression">
            <summary>
            实体子孙属性表达式
            </summary>
        </member>
        <member name="P:Dry.EF.EntityConfigs.TreeEntityConfig`3.AncestorRelationsExpression">
            <summary>
            实体祖先关系属性表达式
            </summary>
        </member>
        <member name="P:Dry.EF.EntityConfigs.TreeEntityConfig`3.DescendantRelationsExpression">
            <summary>
            实体子孙关系属性表达式
            </summary>
        </member>
        <member name="M:Dry.EF.EntityConfigs.TreeEntityConfig`3.AncestorWithMany(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder{Dry.Domain.Entities.ValueObjects.TreeAncestorRelation{`1,`2},`1})">
            <summary>
            实体祖先和关系实体的对多配置
            </summary>
            <param name="hasOne"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.EntityConfigs.TreeEntityConfig`3.DescendantWithMany(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder{Dry.Domain.Entities.ValueObjects.TreeAncestorRelation{`1,`2},`1})">
            <summary>
            实体子孙和关系实体的对多配置
            </summary>
            <param name="hasOne"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.EntityConfigs.TreeEntityConfig`3.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`1})">
            <summary>
            配置实体（表注释要在base调用之前配置，关系表才会有注释）
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:Dry.EF.Extensions.DbDescriptionExtension">
            <summary>
            数据库说明扩展
            </summary>
        </member>
        <member name="M:Dry.EF.Extensions.DbDescriptionExtension.HasDescription``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String)">
            <summary>
            表说明
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entityTypeBuilder"></param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Extensions.DbDescriptionExtension.HasDescription``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.String)">
            <summary>
            表说明
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TDependentEntity"></typeparam>
            <param name="ownedNavigationBuilder"></param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Extensions.DbDescriptionExtension.HasDescription``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)">
            <summary>
            列说明
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="propertyBuilder"></param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="T:Dry.EF.Extensions.MigrationBuilderExtension">
            <summary>
            数据迁移扩展
            </summary>
        </member>
        <member name="M:Dry.EF.Extensions.MigrationBuilderExtension.AddOrUpdateTableDescription(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder,System.String,System.String,System.String)">
            <summary>
            添加或更新表说明
            </summary>
            <param name="migrationBuilder">迁移构造器</param>
            <param name="tableName">表名</param>
            <param name="description">说明</param>
            <param name="schema">架构</param>
        </member>
        <member name="M:Dry.EF.Extensions.MigrationBuilderExtension.AddOrUpdateColumnDescription(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder,System.String,System.String,System.String,System.String)">
            <summary>
            添加或更新列说明
            </summary>
            <param name="migrationBuilder">迁移构造器</param>
            <param name="tableName">表名</param>
            <param name="columnName">列名</param>
            <param name="description">说明</param>
            <param name="schema">架构</param>
        </member>
        <member name="M:Dry.EF.Extensions.MigrationBuilderExtension.ApplyDatabaseDescription(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder,Microsoft.EntityFrameworkCore.Migrations.Migration)">
            <summary>
            从模型注解添加表和列说明，需要先在OnModelCreating方法调用ConfigDatabaseDescription生成注解
            </summary>
            <param name="migrationBuilder"></param>
            <param name="migration"></param>
            <returns></returns>
        </member>
        <member name="T:Dry.EF.Extensions.MigrationSqlTemplate">
            <summary>
            数据迁移扩展Sql模板
            </summary>
        </member>
        <member name="F:Dry.EF.Extensions.MigrationSqlTemplate.AddTableDbDescriptionTemplate">
            <summary>
            添加表说明
            </summary>
        </member>
        <member name="F:Dry.EF.Extensions.MigrationSqlTemplate.AddColumnDbDescriptionTemplate">
            <summary>
            添加列说明
            </summary>
        </member>
        <member name="T:Dry.EF.Extensions.ModelBuilderExtension">
            <summary>
            ef模型创建扩展
            </summary>
        </member>
        <member name="F:Dry.EF.Extensions.ModelBuilderExtension.DbDescriptionAnnotationName">
            <summary>
            数据库说明
            </summary>
        </member>
        <member name="M:Dry.EF.Extensions.ModelBuilderExtension.ConfigDatabaseDescription(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            配置数据库表和列说明
            </summary>
            <param name="modelBuilder">模型构造器</param>
            <returns>模型构造器</returns>
        </member>
        <member name="T:Dry.EF.Extensions.ServiceCollectionExtension">
            <summary>
            IOC注入扩展
            </summary>
        </member>
        <member name="M:Dry.EF.Extensions.ServiceCollectionExtension.AddEF(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加持久层注入
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:Dry.EF.Queryables.EFQueryable">
            <summary>
            EF查询
            </summary>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.ToQueryString(System.Linq.IQueryable)">
            <summary>
            查询字符串
            </summary>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            是否存在
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.AllAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            是否全是
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.ContainsAsync``1(System.Linq.IQueryable{``0},``0)">
            <summary>
            包含
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            数量
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            长整型数量
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            第一条
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            第一条或默认
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.LastAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            最后一条
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.LastOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            最后一条或默认
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            单条
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            单条或默认
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.ToListAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            列表
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.ToArrayAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            数组
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            字典
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="queryable"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            字典
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <param name="queryable"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.MinAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            最小
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            最小
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="queryable"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.MaxAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            最大
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            最大
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="queryable"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.SumAsync(System.Linq.IQueryable{System.Decimal})">
            <summary>
            和
            </summary>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
            <summary>
            和
            </summary>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
            <summary>
            和
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
            <summary>
            和
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.SumAsync(System.Linq.IQueryable{System.Int32})">
            <summary>
            和
            </summary>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}})">
            <summary>
            和
            </summary>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
            <summary>
            和
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
            <summary>
            和
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.SumAsync(System.Linq.IQueryable{System.Int64})">
            <summary>
            和
            </summary>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}})">
            <summary>
            和
            </summary>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
            <summary>
            和
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
            <summary>
            和
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.SumAsync(System.Linq.IQueryable{System.Double})">
            <summary>
            和
            </summary>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}})">
            <summary>
            和
            </summary>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
            <summary>
            和
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
            <summary>
            和
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.SumAsync(System.Linq.IQueryable{System.Single})">
            <summary>
            和
            </summary>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}})">
            <summary>
            和
            </summary>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
            <summary>
            和
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
            <summary>
            和
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.AverageAsync(System.Linq.IQueryable{System.Decimal})">
            <summary>
            平均
            </summary>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
            <summary>
            平均
            </summary>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
            <summary>
            平均
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
            <summary>
            平均
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.AverageAsync(System.Linq.IQueryable{System.Int32})">
            <summary>
            平均
            </summary>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}})">
            <summary>
            平均
            </summary>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
            <summary>
            平均
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
            <summary>
            平均
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.AverageAsync(System.Linq.IQueryable{System.Int64})">
            <summary>
            平均
            </summary>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}})">
            <summary>
            平均
            </summary>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
            <summary>
            平均
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
            <summary>
            平均
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.AverageAsync(System.Linq.IQueryable{System.Double})">
            <summary>
            平均
            </summary>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}})">
            <summary>
            平均
            </summary>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
            <summary>
            平均
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
            <summary>
            平均
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.AverageAsync(System.Linq.IQueryable{System.Single})">
            <summary>
            平均
            </summary>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}})">
            <summary>
            平均
            </summary>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
            <summary>
            平均
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
            <summary>
            平均
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            提前加载
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="queryable"></param>
            <param name="navigationPropertyPath"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.ThenInclude``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
            提前加载多属性实体的属性
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TPreviousProperty"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="queryable"></param>
            <param name="navigationPropertyPath"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.IgnoreAutoIncludes``1(System.Linq.IQueryable{``0})">
            <summary>
            忽略自动加载
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.IgnoreQueryFilters``1(System.Linq.IQueryable{``0})">
            <summary>
            忽略查询筛选
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.AsNoTracking``1(System.Linq.IQueryable{``0})">
            <summary>
            不跟踪
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.AsNoTrackingWithIdentityResolution``1(System.Linq.IQueryable{``0})">
            <summary>
            不跟踪但标识解析
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.AsTracking``1(System.Linq.IQueryable{``0})">
            <summary>
            跟踪
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.TagWith``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            标记
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.LoadAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            延迟加载
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0})">
            <summary>
            遍历
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Queryables.EFQueryable.AsAsyncEnumerable``1(System.Linq.IQueryable{``0})">
            <summary>
            异步迭代器
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="T:Dry.EF.Repositories.ReadOnlyRepository`1">
            <summary>
            ef只读仓储
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="F:Dry.EF.Repositories.ReadOnlyRepository`1._provider">
            <summary>
            服务提供者
            </summary>
        </member>
        <member name="F:Dry.EF.Repositories.ReadOnlyRepository`1._context">
            <summary>
            ef上下文
            </summary>
        </member>
        <member name="M:Dry.EF.Repositories.ReadOnlyRepository`1.#ctor(System.IServiceProvider)">
            <summary>
            构造体
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Dry.EF.Repositories.ReadOnlyRepository`1.GetQueryable">
            <summary>
            获取查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Repositories.ReadOnlyRepository`1.AllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            是否所有记录都满足条件
            </summary>
            <param name="allPredicate"></param>
            <param name="wherePredicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Repositories.ReadOnlyRepository`1.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            是否存在
            </summary>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Repositories.ReadOnlyRepository`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            数量查询
            </summary>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Repositories.ReadOnlyRepository`1.LongCountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            数量查询
            </summary>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Repositories.ReadOnlyRepository`1.FirstAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}}[])">
            <summary>
            条件查询第一条并排序提前加载导航属性
            </summary>
            <param name="predicate"></param>
            <param name="paths"></param>
            <param name="orderBys"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Repositories.ReadOnlyRepository`1.FirstAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}}[])">
            <summary>
            排序条件查询第一条指定字段
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="selector"></param>
            <param name="predicate"></param>
            <param name="orderBys"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Repositories.ReadOnlyRepository`1.ToArrayAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}}[])">
            <summary>
            条件查询并排序提前加载导航属性
            </summary>
            <param name="predicate"></param>
            <param name="paths"></param>
            <param name="orderBys"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Repositories.ReadOnlyRepository`1.ToArrayAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}}[])">
            <summary>
            排序条件查询指定字段
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="selector"></param>
            <param name="predicate"></param>
            <param name="orderBys"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Repositories.ReadOnlyRepository`1.ToArrayAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}}[])">
            <summary>
            排序条件查询指定字段
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="selector"></param>
            <param name="predicate"></param>
            <param name="orderBys"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Repositories.ReadOnlyRepository`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            汇总
            </summary>
            <param name="selector"></param>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Repositories.ReadOnlyRepository`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            汇总
            </summary>
            <param name="selector"></param>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Repositories.ReadOnlyRepository`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            汇总
            </summary>
            <param name="selector"></param>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Repositories.ReadOnlyRepository`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            汇总
            </summary>
            <param name="selector"></param>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Repositories.ReadOnlyRepository`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            汇总
            </summary>
            <param name="selector"></param>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Repositories.ReadOnlyRepository`1.MaxAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            最大值
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="selector"></param>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Repositories.ReadOnlyRepository`1.MinAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            最小值
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="selector"></param>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Repositories.ReadOnlyRepository`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            平均值
            </summary>
            <param name="selector"></param>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Repositories.ReadOnlyRepository`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            平均值
            </summary>
            <param name="selector"></param>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Repositories.ReadOnlyRepository`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            平均值
            </summary>
            <param name="selector"></param>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Repositories.ReadOnlyRepository`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            平均值
            </summary>
            <param name="selector"></param>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Repositories.ReadOnlyRepository`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            平均值
            </summary>
            <param name="selector"></param>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="T:Dry.EF.Repositories.Repository`1">
            <summary>
            ef仓储
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Dry.EF.Repositories.Repository`1.#ctor(System.IServiceProvider)">
            <summary>
            构造体
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Dry.EF.Repositories.Repository`1.GetQueryable">
            <summary>
            获取查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Repositories.Repository`1.PropertyModified``1(`0,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            属性是否更改
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="entitiy"></param>
            <param name="propertyExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Repositories.Repository`1.SingleNavigationPropertyModified``1(`0,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            单数导航属性是否更改
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="entitiy"></param>
            <param name="propertyExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Repositories.Repository`1.ArrayNavigationPropertyModified``1(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})">
            <summary>
            复数导航属性是否更改
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="entitiy"></param>
            <param name="propertyExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Repositories.Repository`1.SinglePropertyLazyLoadAsync``1(`0,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            单数属性延迟加载
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="entitiy"></param>
            <param name="propertyExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Repositories.Repository`1.SinglePropertyLazyLoadAsync``1(`0,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            单数属性延迟加载
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="entitiy"></param>
            <param name="propertyExpression"></param>
            <param name="paths"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Repositories.Repository`1.ArrayPropertyLazyLoadAsync``1(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})">
            <summary>
            复数属性延迟加载
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="entitiy"></param>
            <param name="propertyExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Repositories.Repository`1.ArrayPropertyLazyLoadAsync``1(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            复数属性延迟加载
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="entitiy"></param>
            <param name="propertyExpression"></param>
            <param name="paths"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Repositories.Repository`1.AddAsync(`0[])">
            <summary>
            新增
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Repositories.Repository`1.UpdateAsync(`0[])">
            <summary>
            更新
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Repositories.Repository`1.UpdateAsync(System.Action{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            条件更新
            </summary>
            <param name="set"></param>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Repositories.Repository`1.RemoveAsync(System.Object[])">
            <summary>
            主键删除
            </summary>
            <param name="keyValues"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Repositories.Repository`1.RemoveAsync(`0[])">
            <summary>
            删除
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Repositories.Repository`1.RemoveAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            条件删除
            </summary>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.EF.Repositories.Repository`1.FindAsync(System.Object[])">
            <summary>
            主键查询
            </summary>
            <param name="keyValues"></param>
            <returns></returns>
        </member>
        <member name="T:Dry.EF.Repositories.UnitOfWork`1">
            <summary>
            工作单元
            </summary>
            <typeparam name="TBoundedContext"></typeparam>
        </member>
        <member name="F:Dry.EF.Repositories.UnitOfWork`1._context">
            <summary>
            ef上下文
            </summary>
        </member>
        <member name="F:Dry.EF.Repositories.UnitOfWork`1._mediator">
            <summary>
            中介者
            </summary>
        </member>
        <member name="M:Dry.EF.Repositories.UnitOfWork`1.#ctor(`0,MediatR.IMediator)">
            <summary>
            构造体
            </summary>
            <param name="context"></param>
            <param name="mediator"></param>
        </member>
        <member name="M:Dry.EF.Repositories.UnitOfWork`1.CompleteAsync">
            <summary>
            异步提交
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
