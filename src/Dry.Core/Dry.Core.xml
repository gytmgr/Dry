<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dry.Core</name>
    </assembly>
    <members>
        <member name="T:Dry.Core.Json.Converter.DryJsonConverter`1">
            <summary>
            json转换基类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Dry.Core.Json.Converter.DryJsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            写
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:Dry.Core.Json.Converter.StructJsonConverter`1">
            <summary>
            结构转换
            </summary>
            <typeparam name="TStruct"></typeparam>
        </member>
        <member name="M:Dry.Core.Json.Converter.StructJsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            读
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:Dry.Core.Json.Converter.StructNullableJsonConverter`1">
            <summary>
            可为空结构转换
            </summary>
            <typeparam name="TStruct"></typeparam>
        </member>
        <member name="M:Dry.Core.Json.Converter.StructNullableJsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            读
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns> 
        </member>
        <member name="T:Dry.Core.Json.HttpRequesterExtension">
            <summary>
            http请求扩展
            </summary>
        </member>
        <member name="M:Dry.Core.Json.HttpRequesterExtension.SetRequestParam(Dry.Core.Utilities.HttpRequester,System.Object)">
            <summary>
            设置请求参数
            </summary>
            <param name="requester"></param>
            <param name="param"></param>
        </member>
        <member name="M:Dry.Core.Json.HttpRequesterExtension.GetResultAsync``1(Dry.Core.Utilities.HttpRequester,System.Object)">
            <summary>
            返回泛型结果
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="requester"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="T:Dry.Core.Json.JsonSerializerOptionsExtension">
            <summary>
            json序列化参数扩展
            </summary>
        </member>
        <member name="M:Dry.Core.Json.JsonSerializerOptionsExtension.DefaultConfig(System.Text.Json.JsonSerializerOptions)">
            <summary>
            配置默认参数
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:Dry.Core.Model.CodeData`1">
            <summary>
            编码数据
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="P:Dry.Core.Model.CodeData`1.Code">
            <summary>
            编码
            </summary>
        </member>
        <member name="T:Dry.Core.Model.CodeName">
            <summary>
            编码名称
            </summary>
        </member>
        <member name="P:Dry.Core.Model.CodeName.Code">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:Dry.Core.Model.CodeName.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="T:Dry.Core.Model.CodeNameData`1">
            <summary>
            编码名称数据
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="P:Dry.Core.Model.CodeNameData`1.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="T:Dry.Core.Model.DryData`1">
            <summary>
            泛型数据
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="P:Dry.Core.Model.DryData`1.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="T:Dry.Core.Model.IdData`2">
            <summary>
            标识数据
            </summary>
            <typeparam name="TId"></typeparam>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="P:Dry.Core.Model.IdData`2.Id">
            <summary>
            唯一标识
            </summary>
        </member>
        <member name="T:Dry.Core.Model.IdName`1">
            <summary>
            标识名称
            </summary>
            <typeparam name="TId"></typeparam>
        </member>
        <member name="P:Dry.Core.Model.IdName`1.Id">
            <summary>
            唯一标识
            </summary>
        </member>
        <member name="P:Dry.Core.Model.IdName`1.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="T:Dry.Core.Model.IdNameData`2">
            <summary>
            标识名称数据
            </summary>
            <typeparam name="TId"></typeparam>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="P:Dry.Core.Model.IdNameData`2.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="T:Dry.Core.Model.KeyData`2">
            <summary>
            键数据
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="P:Dry.Core.Model.KeyData`2.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="T:Dry.Core.Model.NameData`1">
            <summary>
            名称数据
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="P:Dry.Core.Model.NameData`1.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="T:Dry.Core.Model.BizException">
            <summary>
            业务异常类
            </summary>
        </member>
        <member name="M:Dry.Core.Model.BizException.#ctor(System.String)">
            <summary>
            构造体
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:Dry.Core.Model.BizException`1">
            <summary>
            业务异常类
            </summary>
            <typeparam name="TCode"></typeparam>
        </member>
        <member name="P:Dry.Core.Model.BizException`1.Code">
            <summary>
            编码
            </summary>
        </member>
        <member name="M:Dry.Core.Model.BizException`1.#ctor(`0,System.String)">
            <summary>
            构造体
            </summary>
            <param name="code"></param>
            <param name="msg"></param>
        </member>
        <member name="T:Dry.Core.Model.NullDataBizException">
            <summary>
            主数据不存在异常类
            </summary>
        </member>
        <member name="F:Dry.Core.Model.NullDataBizException.BizMessage">
            <summary>
            异常消息
            </summary>
        </member>
        <member name="M:Dry.Core.Model.NullDataBizException.#ctor">
            <summary>
            构造体
            </summary>
        </member>
        <member name="M:Dry.Core.Model.NullDataBizException.#ctor(System.String)">
            <summary>
            构造体
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:Dry.Core.Model.TypeBizException">
            <summary>
            类型异常类
            </summary>
        </member>
        <member name="F:Dry.Core.Model.TypeBizException.BizMessage">
            <summary>
            异常消息
            </summary>
        </member>
        <member name="M:Dry.Core.Model.TypeBizException.#ctor">
            <summary>
            构造体
            </summary>
        </member>
        <member name="M:Dry.Core.Model.TypeBizException.#ctor(System.String)">
            <summary>
            构造体
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:Dry.Core.Model.IHasId`1">
            <summary>
            有唯一标识属性
            </summary>
            <typeparam name="TId"></typeparam>
        </member>
        <member name="P:Dry.Core.Model.IHasId`1.Id">
            <summary>
            唯一标识
            </summary>
        </member>
        <member name="T:Dry.Core.Model.IHasOrder">
            <summary>
            有顺序属性
            </summary>
        </member>
        <member name="P:Dry.Core.Model.IHasOrder.Order">
            <summary>
            顺序
            </summary>
        </member>
        <member name="T:Dry.Core.Model.ITree`1">
            <summary>
            值类型id的树状接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Dry.Core.Model.ITree`1.ParentId">
            <summary>
            上级id
            </summary>
        </member>
        <member name="T:Dry.Core.Model.IStringTree">
            <summary>
            string类型id的树状接口
            </summary>
        </member>
        <member name="P:Dry.Core.Model.IStringTree.ParentId">
            <summary>
            上级id
            </summary>
        </member>
        <member name="T:Dry.Core.Model.PagedQuery">
            <summary>
            分页查询
            </summary>
        </member>
        <member name="P:Dry.Core.Model.PagedQuery.PageIndex">
            <summary>
            当前页
            </summary>
        </member>
        <member name="P:Dry.Core.Model.PagedQuery.PageSize">
            <summary>
            每页条目数
            </summary>
        </member>
        <member name="T:Dry.Core.Model.PagedQuery`1">
            <summary>
            分页查询
            </summary>
            <typeparam name="TQuery"></typeparam>
        </member>
        <member name="P:Dry.Core.Model.PagedQuery`1.Param">
            <summary>
            查询参数
            </summary>
        </member>
        <member name="T:Dry.Core.Model.PagedResult`1">
            <summary>
            分页返回结果
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="P:Dry.Core.Model.PagedResult`1.Total">
            <summary>
            总条目数
            </summary>
        </member>
        <member name="P:Dry.Core.Model.PagedResult`1.Items">
            <summary>
            返回条目
            </summary>
        </member>
        <member name="T:Dry.Core.Model.Result`1">
            <summary>
            通用返回结果
            </summary>
            <typeparam name="TCode"></typeparam>
        </member>
        <member name="P:Dry.Core.Model.Result`1.Code">
            <summary>
            返回代码
            </summary>
        </member>
        <member name="P:Dry.Core.Model.Result`1.Message">
            <summary>
            返回信息
            </summary>
        </member>
        <member name="M:Dry.Core.Model.Result`1.Create(`0)">
            <summary>
            创建实例
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Model.Result`1.Create(System.String)">
            <summary>
            创建实例
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Model.Result`1.Create(`0,System.String)">
            <summary>
            创建实例
            </summary>
            <param name="code"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:Dry.Core.Model.Result`2">
            <summary>
            通用返回结果
            </summary>
            <typeparam name="TCode"></typeparam>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="P:Dry.Core.Model.Result`2.Data">
            <summary>
            返回数据
            </summary>
        </member>
        <member name="M:Dry.Core.Model.Result`2.Create(`1)">
            <summary>
            创建实例
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Model.Result`2.Create(`0,`1)">
            <summary>
            创建实例
            </summary>
            <param name="code"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Model.Result`2.Create(System.String,`1)">
            <summary>
            创建实例
            </summary>
            <param name="message"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Model.Result`2.Create(`0,System.String,`1)">
            <summary>
            创建实例
            </summary>
            <param name="code"></param>
            <param name="message"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Dry.Core.Utilities.DateTimeExtension">
            <summary>
            时间扩展
            </summary>
        </member>
        <member name="M:Dry.Core.Utilities.DateTimeExtension.GetChineseWeekName(System.DateTime)">
            <summary>
            获取中文星期
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.DateTimeExtension.GetChineseLunisolarDate(System.DateTime)">
            <summary>
            获取农历日期
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.DateTimeExtension.GetAge(System.DateTime,System.Nullable{System.DateTime})">
            <summary>
            获取年龄
            </summary>
            <param name="fromDate">出生日期</param>
            <param name="toDate">目标日期（为空则取当前日期）</param>
            <returns></returns>
        </member>
        <member name="T:Dry.Core.Utilities.Des3Encrypt">
            <summary>
            ES3 ECB加密类
            </summary>
        </member>
        <member name="M:Dry.Core.Utilities.Des3Encrypt.EncryptAsync(System.String,System.String)">
            <summary>
            ES3 ECB模式加密
            </summary>
            <param name="str"></param>
            <param name="strKey"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.Des3Encrypt.DecryptAsync(System.String,System.String)">
            <summary>
            DES3 ECB模式解密
            </summary>
            <param name="str"></param>
            <param name="strKey"></param>
            <returns></returns>
        </member>
        <member name="T:Dry.Core.Utilities.EnumerableExtensionForTree">
            <summary>
            树状结构扩展
            </summary>
        </member>
        <member name="M:Dry.Core.Utilities.EnumerableExtensionForTree.BuildTree``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.Func{``0,System.Collections.Generic.IEnumerable{``1},``1},System.Predicate{``0})">
            <summary>
            构建树结构
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="currentList">当前列表</param>
            <param name="allList">所有列表</param>
            <param name="idField">id字段的名称</param>
            <param name="parentField">父id字段的名称</param>
            <param name="selector">结果构造器</param>
            <param name="exclude">排除条件</param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.EnumerableExtensionForTree.BuildTree``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``1},System.Predicate{``0})">
            <summary>
            构建值类型主键的树结构
            </summary>
            <typeparam name="TSource">ITree接口实现类型</typeparam>
            <typeparam name="TResult">结果类型</typeparam>
            <typeparam name="TType">TSource的id类型</typeparam>
            <param name="currentList">当前列表</param>
            <param name="allList">所有列表</param>
            <param name="selector">结果构造器</param>
            <param name="exclude">排除条件</param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.EnumerableExtensionForTree.BuildStringTree``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``1},System.Predicate{``0})">
            <summary>
            构建string类型主键的树结构
            </summary>
            <typeparam name="TSource">IStringTree接口实现类型</typeparam>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="currentList">当前列表</param>
            <param name="allList">所有列表</param>
            <param name="selector">结果构造器</param>
            <param name="exclude">排除条件</param>
            <returns></returns>
        </member>
        <member name="T:Dry.Core.Utilities.EnumExtension">
            <summary>
            枚举扩展
            </summary>
        </member>
        <member name="M:Dry.Core.Utilities.EnumExtension.GetDescription(System.Enum,System.Boolean)">
            <summary>
            获取指定枚举项说明
            </summary>
            <param name="value"></param>
            <param name="nameInstead">是否用名称代替（没有说明时）</param>
            <returns></returns>
        </member>
        <member name="T:Dry.Core.Utilities.EnumHelper">
            <summary>
            枚举帮助类
            </summary>
        </member>
        <member name="M:Dry.Core.Utilities.EnumHelper.GetEnumDic``1">
            <summary>
            获取指定类型枚举列表
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.EnumHelper.GetDescription``1(System.Boolean)">
            <summary>
            获取枚举所有项说明
            </summary>
            <typeparam name="T"></typeparam>
            <param name="nameInstead">是否用名称代替（没有说明时）</param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.EnumHelper.GetDescription(System.Type,System.Boolean)">
            <summary>
            获取枚举所有项说明
            </summary>
            <param name="enumType">枚举类型</param>
            <param name="nameInstead">是否用名称代替（没有说明时）</param>
            <returns></returns>
        </member>
        <member name="T:Dry.Core.Utilities.IgnoreHashCodeEqualityComparer`1">
            <summary>
            忽略HashCode比较
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Dry.Core.Utilities.IgnoreHashCodeEqualityComparer`1.GetHashCode(`0)">
            <summary>
            返回默认值以忽略HashCode比较
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Dry.Core.Utilities.HasIdEqualityComparer`2">
            <summary>
            有唯一标识属性类型比较
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TId"></typeparam>
        </member>
        <member name="P:Dry.Core.Utilities.HasIdEqualityComparer`2.Default">
            <summary>
            获取默认值
            </summary>
        </member>
        <member name="M:Dry.Core.Utilities.HasIdEqualityComparer`2.Equals(`0,`0)">
            <summary>
            通过id是否相等比较
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Dry.Core.Utilities.CustomEqualityComparer`1">
            <summary>
            自定义比较
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Dry.Core.Utilities.CustomEqualityComparer`1.EqualFunc">
            <summary>
            比较方法
            </summary>
        </member>
        <member name="P:Dry.Core.Utilities.CustomEqualityComparer`1.Default">
            <summary>
            获取默认值
            </summary>
        </member>
        <member name="M:Dry.Core.Utilities.CustomEqualityComparer`1.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Dry.Core.Utilities.CustomEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean})">
            <summary>
            构造器
            </summary>
            <param name="equalFunc">比较方法</param>
        </member>
        <member name="M:Dry.Core.Utilities.CustomEqualityComparer`1.Equals(`0,`0)">
            <summary>
            调用初始化比较方法比较
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Dry.Core.Utilities.FileHelper">
            <summary>
            文件操作帮助类
            </summary>
        </member>
        <member name="P:Dry.Core.Utilities.FileHelper.Base64ExtMapping">
            <summary>
            base64编码文件扩展名映射
            </summary>
        </member>
        <member name="M:Dry.Core.Utilities.FileHelper.GetMd5Async(System.String)">
            <summary>
            计算文件的md5值
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.FileHelper.GetSize(System.String)">
            <summary>
            获取文件大小
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.FileHelper.CheckDirectory(System.String)">
            <summary>
            检查文件目录是否存在，如不存在则创建
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Dry.Core.Utilities.FileHelper.SaveFileAsync(System.IO.Stream,System.String)">
            <summary>
            从流中读取文件，并保存
            </summary>
            <param name="fileData"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.FileHelper.SaveBase64FileAsync(System.String,System.String)">
            <summary>
            保存Base64编码的文件
            </summary>
            <param name="fileData"></param>
            <param name="path"></param>
            <returns>读取的文件扩展名</returns>
        </member>
        <member name="M:Dry.Core.Utilities.FileHelper.IsChangedAsync(System.String)">
            <summary>
            检查文件是否有修改（根据同目录下“{initFilePath}.txt”文件里面的md5值对比）
            </summary>
            <param name="initFilePath"></param>
            <returns></returns>
        </member>
        <member name="T:Dry.Core.Utilities.FtpHelper">
            <summary>
            ftp帮助类
            </summary>
        </member>
        <member name="P:Dry.Core.Utilities.FtpHelper.FtpHost">
            <summary>
            ftp主机地址
            </summary>
        </member>
        <member name="P:Dry.Core.Utilities.FtpHelper.FtpUserID">
            <summary>
            ftp登录名
            </summary>
        </member>
        <member name="P:Dry.Core.Utilities.FtpHelper.FtpPassword">
            <summary>
            ftp登录密码
            </summary>
        </member>
        <member name="M:Dry.Core.Utilities.FtpHelper.#ctor(System.String,System.String,System.String)">
            <summary>
            构造体
            </summary>
            <param name="ftpServerIP"></param>
            <param name="ftpUserID"></param>
            <param name="ftpPassword"></param>
        </member>
        <member name="M:Dry.Core.Utilities.FtpHelper.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            构造体
            </summary>
            <param name="ftpServerIP"></param>
            <param name="ftpServerPort"></param>
            <param name="ftpUserID"></param>
            <param name="ftpPassword"></param>
        </member>
        <member name="M:Dry.Core.Utilities.FtpHelper.Connect(System.String)">
            <summary>
            连接ftp
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Dry.Core.Utilities.FtpHelper.GetFileListAsync(System.String,System.String)">
            <summary>
            从ftp服务器上获得文件列表
            </summary>
            <param name="path"></param>
            <param name="WRMethods"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.FtpHelper.GetFileListAsync(System.String)">
            <summary>
            从ftp服务器上获得文件列表
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.FtpHelper.GetFileList">
            <summary>
            从ftp服务器上获得文件列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.FtpHelper.UploadAsync(System.String,System.String)">
            <summary>
            从ftp服务器上载文件的功能
            </summary>
            <param name="ftpFilePath"></param>
            <param name="localFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.FtpHelper.DownloadAsync(System.String,System.String)">
            <summary>
            从ftp服务器下载文件
            </summary>
            <param name="localFilePath"></param>
            <param name="ftpFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.FtpHelper.DeleteFileName(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Dry.Core.Utilities.FtpHelper.MakeDir(System.String)">
            <summary>
            创建目录
            </summary>
            <param name="dirName"></param>
        </member>
        <member name="M:Dry.Core.Utilities.FtpHelper.delDir(System.String)">
            <summary>
            删除目录
            </summary>
            <param name="dirName"></param>
        </member>
        <member name="M:Dry.Core.Utilities.FtpHelper.GetFileSize(System.String)">
            <summary>
            获得文件大小
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.FtpHelper.Rename(System.String,System.String)">
            <summary>
            文件改名
            </summary>
            <param name="currentFilename"></param>
            <param name="newFilename"></param>
        </member>
        <member name="M:Dry.Core.Utilities.FtpHelper.GetFilesDetailListAsync">
            <summary>
            获得文件明细
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.FtpHelper.GetFilesDetailListAsync(System.String)">
            <summary>
            获得文件明细
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Dry.Core.Utilities.HashEncrypt">
            <summary>
            Hash加密
            </summary>
        </member>
        <member name="M:Dry.Core.Utilities.HashEncrypt.Encrypt``1(``0,System.String,System.Text.Encoding)">
            <summary>
            字符加密
            </summary>
            <typeparam name="T"></typeparam>
            <param name="hash">加密方式</param>
            <param name="data">加密数据</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.HashEncrypt.Encrypt``1(``0,System.Byte[])">
            <summary>
            字节加密
            </summary>
            <typeparam name="T"></typeparam>
            <param name="hash">加密方式</param>
            <param name="data">加密数据</param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.HashEncrypt.EncryptAsync``1(``0,System.IO.Stream)">
            <summary>
            流加密
            </summary>
            <typeparam name="T"></typeparam>
            <param name="hash">加密方式</param>
            <param name="data">加密数据</param>
            <returns></returns>
        </member>
        <member name="T:Dry.Core.Utilities.HttpRequester">
            <summary>
            http请求
            </summary>
        </member>
        <member name="F:Dry.Core.Utilities.HttpRequester._internalHttpClient">
            <summary>
            是否内部创建的HttpClient
            </summary>
        </member>
        <member name="P:Dry.Core.Utilities.HttpRequester.Method">
            <summary>
            http方法
            </summary>
        </member>
        <member name="P:Dry.Core.Utilities.HttpRequester.Url">
            <summary>
            请求地址
            </summary>
        </member>
        <member name="P:Dry.Core.Utilities.HttpRequester.Headers">
            <summary>
            http头
            </summary>
        </member>
        <member name="P:Dry.Core.Utilities.HttpRequester.Content">
            <summary>
            http内容
            </summary>
        </member>
        <member name="P:Dry.Core.Utilities.HttpRequester.Client">
            <summary>
            http客户端
            </summary>
        </member>
        <member name="P:Dry.Core.Utilities.HttpRequester.Version">
            <summary>
            http版本（默认1.1）
            </summary>
        </member>
        <member name="M:Dry.Core.Utilities.HttpRequester.#ctor(System.Net.Http.HttpMethod,System.String)">
            <summary>
            构造体
            </summary>
            <param name="method"></param>
            <param name="url"></param>
        </member>
        <member name="M:Dry.Core.Utilities.HttpRequester.CheckValidationResult(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            https验证处理（忽略）
            </summary>
            <param name="sender"></param>
            <param name="certificate"></param>
            <param name="chain"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.HttpRequester.GetResultAsync">
            <summary>
            返回结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.HttpRequester.GetStringResultAsync">
            <summary>
            获取字符串结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.HttpRequester.GetByteResult">
            <summary>
            获取字节结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.HttpRequester.GetStreamResult">
            <summary>
            获取流结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.HttpRequester.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:Dry.Core.Utilities.EnumerableExtension">
            <summary>
            Enumerable扩展
            </summary>
        </member>
        <member name="M:Dry.Core.Utilities.EnumerableExtension.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.ValueTuple{System.Boolean,System.Func{``0,System.Object}}[])">
            <summary>
            多字段排序
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="query"></param>
            <param name="orderBys"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.EnumerableExtension.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.ValueTuple{System.Boolean,System.Func{``0,System.Object},System.Collections.Generic.IComparer{System.Object}}[])">
            <summary>
            使用比较器多字段排序
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="query"></param>
            <param name="orderBys"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.EnumerableExtension.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            指定属性去重
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="query"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.EnumerableExtension.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            差集
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <param name="equalFunc"></param>
            <returns></returns>
        </member>
        <member name="T:Dry.Core.Utilities.QueryableExtension">
            <summary>
            Queryable扩展
            </summary>
        </member>
        <member name="M:Dry.Core.Utilities.QueryableExtension.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
            <summary>
            设置多条件
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="query"></param>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.QueryableExtension.OrderBy``1(System.Linq.IQueryable{``0},System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}}[])">
            <summary>
            多字段排序
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="query"></param>
            <param name="orderBys"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.QueryableExtension.OrderBy``1(System.Linq.IQueryable{``0},System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IComparer{System.Object}}[])">
            <summary>
            使用比较器多字段排序
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="query"></param>
            <param name="orderBys"></param>
            <returns></returns>
        </member>
        <member name="T:Dry.Core.Utilities.ExpressionExtension">
            <summary>
            Lambda表达式扩展
            </summary>
        </member>
        <member name="M:Dry.Core.Utilities.ExpressionExtension.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            条件合并_并集
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression1"></param>
            <param name="expression2"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.ExpressionExtension.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            条件合并_交集
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression1"></param>
            <param name="expression2"></param>
            <returns></returns>
        </member>
        <member name="T:Dry.Core.Utilities.LinqHelper">
            <summary>
            linq帮助类
            </summary>
        </member>
        <member name="M:Dry.Core.Utilities.LinqHelper.GetExpressionInfo``1(System.String)">
            <summary>
            获取表达式
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.LinqHelper.GetKeySelector``2(System.String)">
            <summary>
            获取根据字段名获取Lambda表达式
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="T:Dry.Core.Utilities.LogHelper">
            <summary>
            日志帮助类
            </summary>
        </member>
        <member name="M:Dry.Core.Utilities.LogHelper.WriteExceptionAsync(System.IO.StreamWriter,System.Exception,System.Int32)">
            <summary>
            记录异常日志
            </summary>
            <param name="stream"></param>
            <param name="e"></param>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.LogHelper.ExceptionAsync(System.String,System.String,System.Exception,System.String[])">
            <summary>
            记录异常
            </summary>
            <param name="className">类名</param>
            <param name="methodName">方法名</param>
            <param name="e">异常</param>
            <param name="otherInfo">其他信息</param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.LogHelper.ExceptionAsync(System.Exception,System.String[])">
            <summary>
            记录异常
            </summary>
            <param name="e">异常</param>
            <param name="otherInfo">其他信息</param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.LogHelper.ExceptionToPathAsync(System.String,System.Exception,System.String[])">
            <summary>
            记录异常到指定路径
            </summary>
            <param name="relativePath">应用目录下的相对路径</param>
            <param name="e">异常</param>
            <param name="otherInfo">其他信息</param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.LogHelper.ActionAsync(System.String[])">
            <summary>
            记录日常日志
            </summary>
            <param name="data">日志内容</param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.LogHelper.ActionToPathAsync(System.String,System.String[])">
            <summary>
            记录日常日志到指定路径
            </summary>
            <param name="relativePath">应用目录下的相对路径</param>
            <param name="data">日志内容</param>
            <returns></returns>
        </member>
        <member name="T:Dry.Core.Utilities.ObjectExtension">
            <summary>
            对象扩展
            </summary>
        </member>
        <member name="M:Dry.Core.Utilities.ObjectExtension.ToNullArray``1(``0)">
            <summary>
            对象转单元素数组，如空则返回空
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.ObjectExtension.DeepCopy``1(``0)">
            <summary>
            深拷贝
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.ObjectExtension.ToStringUpper``1(``0)">
            <summary>
            转大写
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.ObjectExtension.ToStringLower``1(``0)">
            <summary>
            转小写
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.ObjectExtension.ObjectToUriParam(System.Object)">
            <summary>
            对象转url参数
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Dry.Core.Utilities.StringExtension">
            <summary>
            字符串扩展
            </summary>
        </member>
        <member name="M:Dry.Core.Utilities.StringExtension.ToBool(System.String)">
            <summary>
            转换为可为空的bool
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.StringExtension.ToSByte(System.String)">
            <summary>
            转换为可为空的sbyte
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.StringExtension.ToByte(System.String)">
            <summary>
            转换为可为空的byte
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.StringExtension.ToShort(System.String)">
            <summary>
            转换为可为空的short
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.StringExtension.ToUShort(System.String)">
            <summary>
            转换为可为空的ushort
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.StringExtension.ToInt(System.String)">
            <summary>
            转换为可为空的int
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.StringExtension.ToUInt(System.String)">
            <summary>
            转换为可为空的uint
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.StringExtension.ToLong(System.String)">
            <summary>
            转换为可为空的long
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.StringExtension.ToULong(System.String)">
            <summary>
            转换为可为空的ulong
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.StringExtension.ToFloat(System.String)">
            <summary>
            转换为可为空的float
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.StringExtension.ToDouble(System.String)">
            <summary>
            转换为可为空的double
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.StringExtension.ToDecimal(System.String)">
            <summary>
            转换为可为空的decimal
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.StringExtension.ToChar(System.String)">
            <summary>
            转换为可为空的char
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.StringExtension.ToEnum``1(System.String)">
            <summary>
            转换为可为空的Enum
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.StringExtension.ToGuid(System.String)">
            <summary>
            转换为可为空的guid
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.StringExtension.ToDateTime(System.String)">
            <summary>
            转换为可为空的DateTime
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.StringExtension.ToTimeSpan(System.String)">
            <summary>
            转换为可为空的TimeSpan
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.StringExtension.EmptyToNull(System.String)">
            <summary>
            将空字符处理为null
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.StringExtension.NullToEmpty(System.String)">
            <summary>
            将null处理为Empty
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.StringExtension.TryParse``1(System.String,``0@)">
            <summary>
            字符串转结构
            </summary>
            <typeparam name="T"></typeparam>
            <param name="str"></param>
            <param name="outResult"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.StringExtension.TryParse(System.String,System.Type,System.Object@)">
            <summary>
            字符串转值类型
            </summary>
            <param name="str"></param>
            <param name="outType"></param>
            <param name="outResult"></param>
            <returns></returns>
        </member>
        <member name="T:Dry.Core.Utilities.StructExtension">
            <summary>
            结构扩展
            </summary>
        </member>
        <member name="M:Dry.Core.Utilities.StructExtension.DefaultToNull``1(``0)">
            <summary>
            将默认值转成null
            </summary>
            <typeparam name="TStruct"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Dry.Core.Utilities.TypeExtension">
            <summary>
            类型扩展
            </summary>
        </member>
        <member name="M:Dry.Core.Utilities.TypeExtension.IsDerivedFrom(System.Type,System.Type)">
            <summary>
            判断 <paramref name="type"/> 指定的类型是否继承自 <paramref name="pattern"/> 指定的类型，或实现了 <paramref name="pattern"/> 指定的接口
            支持未知类型参数的泛型，如typeof(List&lt;&gt;)
            </summary>
            <param name="type">需要测试的类型</param>
            <param name="pattern">要匹配的类型，如 typeof(int)，typeof(IEnumerable)，typeof(List&lt;&gt;)，typeof(List&lt;int&gt;)，typeof(IDictionary&lt;,&gt;)</param>
            <returns>如果 <paramref name="type"/> 指定的类型继承自 <paramref name="pattern"/> 指定的类型，或实现了 <paramref name="pattern"/> 指定的接口，则返回 true，否则返回 false</returns>
        </member>
        <member name="M:Dry.Core.Utilities.TypeExtension.DefaultValue(System.Type)">
            <summary>
            获取类型默认值
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Core.Utilities.TypeExtension.GetFields``1(System.Type)">
            <summary>
            获取指定类型指定字段类型的数据
            </summary>
            <typeparam name="TField"></typeparam>
            <param name="classType"></param>
            <returns></returns>
        </member>
    </members>
</doc>
