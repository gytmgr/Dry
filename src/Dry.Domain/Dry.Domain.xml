<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dry.Domain</name>
    </assembly>
    <members>
        <member name="T:Dry.Domain.Entities.IAggregateRoot">
            <summary>
            聚合根
            </summary>
        </member>
        <member name="T:Dry.Domain.Entities.IAggregateRoot`1">
            <summary>
            单一主键聚合根
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="T:Dry.Domain.Entities.ICreate">
            <summary>
            实体创建接口
            </summary>
        </member>
        <member name="M:Dry.Domain.Entities.ICreate.CreateAsync(System.IServiceProvider)">
            <summary>
            创建
            </summary>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Dry.Domain.Entities.IDelete">
            <summary>
            实体删除接口
            </summary>
        </member>
        <member name="M:Dry.Domain.Entities.IDelete.DeleteAsync(System.IServiceProvider)">
            <summary>
            删除
            </summary>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Dry.Domain.Entities.IEdit">
            <summary>
            实体编辑接口
            </summary>
        </member>
        <member name="M:Dry.Domain.Entities.IEdit.EditAsync(System.IServiceProvider)">
            <summary>
            编辑
            </summary>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Dry.Domain.Entities.IEntity">
            <summary>
            实体
            </summary>
        </member>
        <member name="T:Dry.Domain.Entities.IEntity`1">
            <summary>
            单一主键实体
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:Dry.Domain.Entities.IEntity`1.Id">
            <summary>
            主键
            </summary>
        </member>
        <member name="T:Dry.Domain.Entities.IHasAddTime">
            <summary>
            有新增时间实体
            </summary>
        </member>
        <member name="P:Dry.Domain.Entities.IHasAddTime.AddTime">
            <summary>
            新增时间
            </summary>
        </member>
        <member name="T:Dry.Domain.Entities.IHasUpdateTime">
            <summary>
            有更新时间实体
            </summary>
        </member>
        <member name="P:Dry.Domain.Entities.IHasUpdateTime.UpdateTime">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="T:Dry.Domain.Entities.ValueObjects.TreeAncestorRelation`2">
            <summary>
            树状实体与祖先关系
            </summary>
            <typeparam name="TTreeEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:Dry.Domain.Entities.ValueObjects.TreeAncestorRelation`2.RelationId">
            <summary>
            树状实体id
            </summary>
        </member>
        <member name="P:Dry.Domain.Entities.ValueObjects.TreeAncestorRelation`2.AncestorId">
            <summary>
            祖先id
            </summary>
        </member>
        <member name="P:Dry.Domain.Entities.ValueObjects.TreeAncestorRelation`2.Relation">
            <summary>
            树状实体
            </summary>
        </member>
        <member name="P:Dry.Domain.Entities.ValueObjects.TreeAncestorRelation`2.Ancestor">
            <summary>
            祖先
            </summary>
        </member>
        <member name="T:Dry.Domain.Extensions.ServiceProviderExtension">
            <summary>
            服务创建扩展
            </summary>
        </member>
        <member name="M:Dry.Domain.Extensions.ServiceProviderExtension.GetRepository``1(System.IServiceProvider)">
            <summary>
            获取仓储服务
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="T:Dry.Domain.IBoundedContext">
            <summary>
            限界上下文
            </summary>
        </member>
        <member name="T:Dry.Domain.Repositories.IRepository`1">
            <summary>
            仓储接口
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.PropertyModified``1(`0,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            属性是否更改
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="entitiy"></param>
            <param name="propertyExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.AddAsync(`0[])">
            <summary>
            新增
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.UpdateAsync(`0[])">
            <summary>
            更新
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.UpdateAsync(System.Action{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            条件更新
            </summary>
            <param name="set"></param>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.RemoveAsync(System.Object[])">
            <summary>
            主键删除
            </summary>
            <param name="keyValues"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.RemoveAsync(`0[])">
            <summary>
            删除
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.RemoveAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            条件删除
            </summary>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.AllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            是否所有记录都满足条件
            </summary>
            <param name="allPredicate"></param>
            <param name="wherePredicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            是否存在
            </summary>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            数量查询
            </summary>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.LongCountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            数量查询
            </summary>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.FindAsync(System.Object[])">
            <summary>
            主键查询
            </summary>
            <param name="keyValues"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.FirstAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            条件查询第一条
            </summary>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.FirstAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            条件查询第一条并提前加载导航属性
            </summary>
            <param name="predicate"></param>
            <param name="paths"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.FirstAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}}[])">
            <summary>
            条件查询第一条并排序提前加载导航属性
            </summary>
            <param name="predicate"></param>
            <param name="paths"></param>
            <param name="orderBys"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.FirstAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[],System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}}[])">
            <summary>
            条件查询第一条并排序提前加载导航属性
            </summary>
            <param name="predicates"></param>
            <param name="paths"></param>
            <param name="orderBys"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.FirstAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}}[])">
            <summary>
            排序条件查询第一条指定字段
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="selector"></param>
            <param name="predicate"></param>
            <param name="orderBys"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.FirstAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[],System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}}[])">
            <summary>
            排序条件查询第一条指定字段
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="selector"></param>
            <param name="predicates"></param>
            <param name="orderBys"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.FirstAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            自定义查询第一条并提前加载导航属性
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <param name="paths"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.ToArrayAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            条件查询
            </summary>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.ToArrayAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            条件查询并提前加载导航属性
            </summary>
            <param name="predicate"></param>
            <param name="paths"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.ToArrayAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}}[])">
            <summary>
            条件查询并排序提前加载导航属性
            </summary>
            <param name="predicate"></param>
            <param name="paths"></param>
            <param name="orderBys"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.ToArrayAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[],System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}}[])">
            <summary>
            条件查询并排序提前加载导航属性
            </summary>
            <param name="predicates"></param>
            <param name="paths"></param>
            <param name="orderBys"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.ToArrayAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}}[])">
            <summary>
            排序条件查询指定字段
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="selector"></param>
            <param name="predicate"></param>
            <param name="orderBys"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.ToArrayAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[],System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}}[])">
            <summary>
            排序条件查询指定字段
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="selector"></param>
            <param name="predicates"></param>
            <param name="orderBys"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.ToArrayAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}}[])">
            <summary>
            排序条件查询指定字段
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="selector"></param>
            <param name="predicate"></param>
            <param name="orderBys"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.ToArrayAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[],System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}}[])">
            <summary>
            排序条件查询指定字段
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="selector"></param>
            <param name="predicates"></param>
            <param name="orderBys"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.ToArrayAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            自定义查询并提前加载导航属性
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <param name="paths"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            汇总
            </summary>
            <param name="selector"></param>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            汇总
            </summary>
            <param name="selector"></param>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            汇总
            </summary>
            <param name="selector"></param>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            汇总
            </summary>
            <param name="selector"></param>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            汇总
            </summary>
            <param name="selector"></param>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.MaxAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            最大值
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="selector"></param>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.MinAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            最小值
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="selector"></param>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            平均值
            </summary>
            <param name="selector"></param>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            平均值
            </summary>
            <param name="selector"></param>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            平均值
            </summary>
            <param name="selector"></param>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            平均值
            </summary>
            <param name="selector"></param>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            平均值
            </summary>
            <param name="selector"></param>
            <param name="predicates"></param>
            <returns></returns>
        </member>
        <member name="T:Dry.Domain.Repositories.IUnitOfWork`1">
            <summary>
            工作单元
            </summary>
            <typeparam name="TBoundedContext"></typeparam>
        </member>
        <member name="M:Dry.Domain.Repositories.IUnitOfWork`1.CompleteAsync">
            <summary>
            提交
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
