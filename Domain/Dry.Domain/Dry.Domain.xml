<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dry.Domain</name>
    </assembly>
    <members>
        <member name="T:Dry.Domain.Entities.IAggregateRoot">
            <summary>
            聚合根
            </summary>
        </member>
        <member name="T:Dry.Domain.Entities.IAggregateRoot`1">
            <summary>
            单一主键聚合根
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="T:Dry.Domain.Entities.IEntity">
            <summary>
            实体
            </summary>
        </member>
        <member name="T:Dry.Domain.Entities.IEntity`1">
            <summary>
            单一主键实体
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:Dry.Domain.Entities.IEntity`1.Id">
            <summary>
            主键
            </summary>
        </member>
        <member name="T:Dry.Domain.IBoundedContext">
            <summary>
            限界上下文
            </summary>
        </member>
        <member name="T:Dry.Domain.Repositories.IRepository`1">
            <summary>
            仓储接口
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.GetQueryable">
            <summary>
            获取linq查询表达式
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.Include(System.Linq.IQueryable{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            提前加载
            </summary>
            <param name="queryable"></param>
            <param name="paths"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.FindAsync(System.Object[])">
            <summary>
            主键查询
            </summary>
            <param name="keyValues"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.AddAsync(`0)">
            <summary>
            新增
            </summary>
            <param name="entitiy"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.AddAsync(`0[])">
            <summary>
            新增
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.UpdateAsync(`0)">
            <summary>
            更新
            </summary>
            <param name="entitiy"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.UpdateAsync(`0[])">
            <summary>
            更新
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.UpdateAsync(System.Action{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            条件更新
            </summary>
            <param name="set"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.RemoveAsync(System.Object)">
            <summary>
            主键删除
            </summary>
            <param name="keyValue"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.RemoveAsync(System.Object[])">
            <summary>
            主键删除
            </summary>
            <param name="keyValues"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.RemoveAsync(`0)">
            <summary>
            删除
            </summary>
            <param name="entitiy"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.RemoveAsync(`0[])">
            <summary>
            删除
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.RemoveAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            条件删除
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.AllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            是否所有记录都满足条件
            </summary>
            <param name="allPredicate"></param>
            <param name="wherePredicate"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            是否存在
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.AnyAsync(System.Linq.IQueryable{`0})">
            <summary>
            Any
            </summary>
            <param name="querable"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            数量查询
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.CountAsync(System.Linq.IQueryable{`0})">
            <summary>
            数量查询
            </summary>
            <param name="querable"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.LongCountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            数量查询
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.LongCountAsync(System.Linq.IQueryable{`0})">
            <summary>
            数量查询
            </summary>
            <param name="querable"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.FirstAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            条件查询第一条
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.FirstAsync(System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}}[])">
            <summary>
            排序查询第一条
            </summary>
            <param name="orderBys"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.FirstAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}}[])">
            <summary>
            条件查询第一条并排序
            </summary>
            <param name="predicate"></param>
            <param name="orderBys"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.FirstAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            条件查询第一条并提前加载导航属性
            </summary>
            <param name="predicate"></param>
            <param name="paths"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.FirstAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}}[])">
            <summary>
            条件查询第一条并排序提前加载导航属性
            </summary>
            <param name="predicate"></param>
            <param name="paths"></param>
            <param name="orderBys"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.FirstAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}}[])">
            <summary>
            排序查询第一条指定字段
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="selector"></param>
            <param name="orderBys"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.FirstAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}}[])">
            <summary>
            排序条件查询第一条指定字段
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="selector"></param>
            <param name="predicate"></param>
            <param name="orderBys"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.FirstAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            条件查询第一条
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="querable"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.ToArrayAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            条件查询
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.ToArrayAsync(System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}}[])">
            <summary>
            排序查询
            </summary>
            <param name="orderBys"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.ToArrayAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}}[])">
            <summary>
            条件查询并排序
            </summary>
            <param name="predicate"></param>
            <param name="orderBys"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.ToArrayAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            条件查询并提前加载导航属性
            </summary>
            <param name="predicate"></param>
            <param name="paths"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.ToArrayAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[],System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}}[])">
            <summary>
            条件查询并排序提前加载导航属性
            </summary>
            <param name="predicate"></param>
            <param name="paths"></param>
            <param name="orderBys"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.ToArrayAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}}[])">
            <summary>
            排序查询指定字段
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="selector"></param>
            <param name="orderBys"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.ToArrayAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}}[])">
            <summary>
            排序查询指定字段
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="selector"></param>
            <param name="orderBys"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.ToArrayAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}}[])">
            <summary>
            排序条件查询指定字段
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="selector"></param>
            <param name="predicate"></param>
            <param name="orderBys"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.ToArrayAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.ValueTuple{System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}}[])">
            <summary>
            排序条件查询指定字段
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="selector"></param>
            <param name="predicate"></param>
            <param name="orderBys"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.ToArrayAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            条件查询
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="querable"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            汇总
            </summary>
            <param name="selector"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            汇总
            </summary>
            <param name="selector"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            汇总
            </summary>
            <param name="selector"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            汇总
            </summary>
            <param name="selector"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            汇总
            </summary>
            <param name="selector"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.MaxAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            最大值
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="selector"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.MinAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            最小值
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="selector"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            平均值
            </summary>
            <param name="selector"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            平均值
            </summary>
            <param name="selector"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            平均值
            </summary>
            <param name="selector"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            平均值
            </summary>
            <param name="selector"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Dry.Domain.Repositories.IRepository`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            平均值
            </summary>
            <param name="selector"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="T:Dry.Domain.Repositories.IUnitOfWork`1">
            <summary>
            工作单元
            </summary>
            <typeparam name="TBoundedContext"></typeparam>
        </member>
        <member name="M:Dry.Domain.Repositories.IUnitOfWork`1.CompleteAsync">
            <summary>
            提交
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dry.Domain.ValueObjects.Sex">
            <summary>
            性别
            </summary>
        </member>
        <member name="F:Dry.Domain.ValueObjects.Sex.Man">
            <summary>
            男
            </summary>
        </member>
        <member name="F:Dry.Domain.ValueObjects.Sex.Woman">
            <summary>
            女
            </summary>
        </member>
    </members>
</doc>
